name: Local CI-CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]

jobs:
  # ------------------------
  # JOB 1: Run Unit Tests
  # ------------------------
  test:
    name: Run Unit Tests
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Verify Python installation
      shell: powershell
      run: |
        Write-Host "Checking if Python is already installed..."
        if (-Not (Get-Command python -ErrorAction SilentlyContinue)) {
          Write-Host "Python not found. Installing via Chocolatey..."
          choco install python --version=3.10.0 -y
        } else {
          Write-Host "Python is already installed."
        }
        python --version

    - name: Upgrade pip
      shell: powershell
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      shell: powershell
      run: |
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        } else {
          Write-Host "No requirements.txt found, skipping..."
        }

    - name: Run tests
      shell: powershell
      run: |
        if (Get-Command pytest -ErrorAction SilentlyContinue) {
          pytest
        } else {
          Write-Host "pytest not installed, installing now..."
          pip install pytest
          pytest
        }

  # ------------------------
  # JOB 2: Build and Push Docker Image
  # ------------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        # Make sure your username and repo name match exactly (case-sensitive)
        tags: ghcr.io/akash66taa/devopsproject:latest

  # ------------------------
  # JOB 3: Deploy with Terraform
  # ------------------------
  deploy:
    name: Deploy to Local Docker Swarm
    runs-on: self-hosted
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy using Terraform
      shell: powershell
      run: |
        $terraformPath = "C:\Users\AKASH\OneDrive\Desktop\DEVOPSPROJECT\terraform"

        Write-Host "üîç Checking for Terraform directory..."
        if (-Not (Test-Path $terraformPath)) {
          Write-Error "‚ùå Terraform directory not found at $terraformPath"
          exit 1
        }

        Set-Location $terraformPath
        Write-Host "üìÅ Current directory: $(Get-Location)"

        # --------------------------
        # ‚úÖ Ensure Terraform Installed
        # --------------------------
        if (-Not (Get-Command terraform -ErrorAction SilentlyContinue)) {
          Write-Host "‚öôÔ∏è Terraform not found ‚Äî installing via Chocolatey..."
          choco install terraform -y

          # Add Terraform to PATH for current session
          $terraformExe = "C:\ProgramData\chocolatey\bin\terraform.exe"
          if (Test-Path $terraformExe) {
            $env:Path += ";C:\ProgramData\chocolatey\bin"
            Write-Host "‚úÖ Added Terraform to PATH temporarily."
          } else {
            Write-Error "‚ùå Terraform installation path not found after install!"
            exit 1
          }
        } else {
          Write-Host "‚úÖ Terraform is already installed."
        }

        # --------------------------
        # üß© Verify Terraform Version
        # --------------------------
        terraform -version

        # --------------------------
        # üöÄ Initialize & Apply
        # --------------------------
        Write-Host "üöÄ Initializing Terraform..."
        terraform init -no-color

        Write-Host "üöÄ Applying Terraform configuration..."
        terraform apply -auto-approve -no-color

        Write-Host "üéâ Terraform deployment completed successfully!"
